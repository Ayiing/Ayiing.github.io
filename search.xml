<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>2020/9/20力扣周赛第三题</title>
    <url>/2020/09/20/2020-9-20%E5%8A%9B%E6%89%A3%E5%91%A8%E8%B5%9B%E7%AC%AC%E4%B8%89%E9%A2%98/</url>
    <content><![CDATA[<h3 id="1-简单DP"><a href="#1-简单DP" class="headerlink" title="1.简单DP"></a>1.简单DP</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums&#x3D;[1,1,1,1,1]</span><br><span class="line">输出：[1,1+1,1+1+1,1+1+1+1,1+1+1+1+1]</span><br></pre></td></tr></table></figure>

<p>转移方程：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">dp[i]=dp[i<span class="number">-1</span>]+nums[i]</span><br><span class="line">dp[<span class="number">0</span>]=nums[<span class="number">0</span>]</span><br><span class="line"><span class="comment">//dp[i]表示i+1个数的数组动态和</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//最大子数组和：</span></span><br><span class="line">输入： [<span class="number">-2</span>,<span class="number">1</span>,<span class="number">-3</span>,<span class="number">4</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">-5</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">6</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dp[i]表示i+1个元素的数组最大子数组和，且一定包含nums[i]这个元素</span></span><br><span class="line"><span class="comment">//因为设置了该子数组和一定包含nums[i]这个元素，故</span></span><br><span class="line">dp[i]=max(dp[i<span class="number">-1</span>]+nums[i], nums[i])</span><br></pre></td></tr></table></figure>

<p>设置一定包含nums[i], 是为了</p>
<p><strong>dp[i]一定表示连续的子数组之和</strong>，不会因为dp[i-1]+nums[i]导致“数组元素被分割开”。</p>
<a id="more"></a>

<p>这样的话，dp[i]就不能表示nums[i]的最大子数组之和，而是表示<strong>“以nums[i]结尾的最大子数组之和”</strong>，显然，整个数组的最大子数组之和，被分解为以nums[0]\nums[1]\nums[2].…nums[i]（正是dp[i]的含义）为结尾的子数组之和，求其中的最大值即可。</p>
<h2 id="2-2020-9-20力扣赛第三题"><a href="#2-2020-9-20力扣赛第三题" class="headerlink" title="2. 2020/9/20力扣赛第三题"></a>2. 2020/9/20力扣赛第三题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给你一个大小为 rows x cols 的矩阵 grid 。最初，你位于左上角 (0, 0) ，每一步，你可以在矩阵中 向右 或 向下 移动。</span><br><span class="line"></span><br><span class="line">在从左上角 (0, 0) 开始到右下角 (rows - 1, cols - 1) 结束的所有路径中，找出具有 最大非负积 的路径。路径的积是沿路径访问的单元格中所有整数的乘积。</span><br><span class="line"></span><br><span class="line">返回 最大非负积 对 109 + 7 取余 的结果。如果最大积为负数，则返回 -1 。</span><br><span class="line"></span><br><span class="line">注意，取余是在得到最大积之后执行的</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;maximum-non-negative-product-in-a-matrix</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：grid &#x3D; [[-1,-2,-3],</span><br><span class="line">             [-2,-3,-3],</span><br><span class="line">             [-3,-3,-2]]</span><br><span class="line">输出：-1</span><br><span class="line">解释：从 (0, 0) 到 (2, 2) 的路径中无法得到非负积，所以返回 -1</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;maximum-non-negative-product-in-a-matrix</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>

<p>值得留意的是，寻找矩阵的最大非负积，和最大和的不同：<strong>（个人理解）</strong></p>
<p>最大和尽管也会出现负数，但和的增长是单调的，每一次只需要维护max[i]（表示 前i+1个数中最大和）即可，max[i]仅和上一个的最大和有关。</p>
<p>最大乘积不同，max[i]不仅和上一个最大乘积有关，也可以和上一个最小乘积相关，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如，前一个最大乘积为10，最小乘积为-20，当前nums[i]&#x3D;-5，那么当前的最大乘积就应该是和前一个的最小乘积有关。</span><br></pre></td></tr></table></figure>

<p>综上</p>
<p>需要维护两个数组，</p>
<p>max[i]：最大乘积</p>
<p>min[i]:  最小乘积</p>
<p>其他和一般dp相似。</p>
<p><strong>该题还需要注意的是：中间结果用long long表示</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> m[<span class="number">16</span>][<span class="number">16</span>];<span class="comment">//每个位置获得的最大值</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> l[<span class="number">16</span>][<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> a=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="title">maxfun</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> a, <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&gt;b? a: b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="title">minfun</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> a,<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&lt;b? a: b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProductPath</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row=grid.size(),col=grid[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> i,j;</span><br><span class="line">        m[<span class="number">0</span>][<span class="number">0</span>]=grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        l[<span class="number">0</span>][<span class="number">0</span>]=grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;col; ++i)&#123;</span><br><span class="line">            m[<span class="number">0</span>][i] = m[<span class="number">0</span>][i<span class="number">-1</span>] * grid[<span class="number">0</span>][i];</span><br><span class="line">            l[<span class="number">0</span>][i] = l[<span class="number">0</span>][i<span class="number">-1</span>] * grid[<span class="number">0</span>][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;row; ++i)&#123;</span><br><span class="line">            m[i][<span class="number">0</span>] = m[i<span class="number">-1</span>][<span class="number">0</span>] * grid[i][<span class="number">0</span>];</span><br><span class="line">            l[i][<span class="number">0</span>] = l[i<span class="number">-1</span>][<span class="number">0</span>] * grid[i][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;row; ++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;col; ++j)&#123;</span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> down1=m[i<span class="number">-1</span>][j] * grid[i][j], down2=l[i<span class="number">-1</span>][j]*grid[i][j];</span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> right1=m[i][j<span class="number">-1</span>] * grid[i][j], right2=l[i][j<span class="number">-1</span>]*grid[i][j];</span><br><span class="line">                l[i][j]= minfun(down1,minfun(down2,minfun(right1,right2)));</span><br><span class="line">                m[i][j]=  maxfun(down1,maxfun(down2,maxfun(right1,right2)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> res=m[row<span class="number">-1</span>][col<span class="number">-1</span>]&gt;l[row<span class="number">-1</span>][col<span class="number">-1</span>] ? m[row<span class="number">-1</span>][col<span class="number">-1</span>] : l[row<span class="number">-1</span>][col<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(res&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> (res)%a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algo</category>
      </categories>
      <tags>
        <tag>DP 二维</tag>
      </tags>
  </entry>
</search>
